# Осуществить программу работы с органическими клетками, состоящими из ячеек.
# Необходимо создать класс «Клетка». В его конструкторе инициализировать параметр, соответствующий
# количеству ячеек клетки (целое число). В классе должны быть реализованы методы перегрузки арифметических операторов:
# сложение (__add__()), вычитание (__sub__()), умножение (__mul__()), деление (__floordiv____truediv__()).
# Эти методы должны применяться только к клеткам и выполнять увеличение, уменьшение, умножение и округление
# до целого числа деления клеток, соответственно.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек
# исходных двух клеток.  Вычитание. Участвуют две клетки. Операцию необходимо выполнять, только если разность
# количества ячеек двух клеток больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создаётся общая клетка из двух. Число ячеек общей клетки — произведение количества ячеек этих двух клеток.
# Деление. Создаётся общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Этот метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, а количество ячеек в ряду — 5.
# В этом случае метод make_order() вернёт строку: *****\n*****\n**.
# Или, количество ячеек клетки — 15, а количество ячеек в ряду равняется 5.
# Тогда метод make_order() вернёт строку: *****\n*****\n*****.

from random import randint


def get_random_char():
    return chr(randint(33, 44))


class Cell:
    def __init__(self, cells):
        self.cells = cells

    def __str__(self):
        return f"Я клетка! Во мне {self.cells} ячеек"

    def __add__(self, other):
        return self.cells + other.cells

    def __sub__(self, other):
        if self.cells - other.cells < 0:
            print(f"Разница не может быть отрицательна!")
            return 0
        else:
            return self.cells - other.cells

    def __mul__(self, other):
        return self.cells * other.cells

    def __truediv__(self, other):
        return self.cells // other.cells

    def make_order(self, num):
        sym = get_random_char()
        return '\n'.join([sym * num for x in range(0, self.cells // num)]) \
               + f"\n{sym * (self.cells % num)}"


cell_1 = Cell(18)
cell_2 = Cell(34)
print(cell_1)
print(cell_2)
print()
print(cell_1.make_order(5))
print()
print(cell_1.make_order(8))
print()
print(cell_2.make_order(9))
print()
print(cell_1 + cell_2)
print(cell_1 - cell_2)
print(cell_2 - cell_1)
print(cell_2 / cell_1)
print(cell_2 * cell_1)
